Importing the function from the module:
    >>> add_integer = __import__("0-add_integer").add_integer

Checks: module docstring:
    >>> x = __import__("0-add_integer").__doc__
    >>> len(x) > 1
    True

Check: function docstring:
    >>> f = __import__("0-add_integer").add_integer.__doc__
    >>> len(f) > 1
    True

Check: Regular tests passed:
    >>> add_integer(4, 98)
    102

Check: passing one int arg:
    >>> add_integer(2)
    100

Check: check the default arg:
    >>> add_integer(0)
    98

Check: 2 big integers:
    >>> add_integer(9999999998, 9999999999)
    19999999997

Check: add infinity:
    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

Check: negative with positive
    >>> add_integer(-5, 2)
    -3

Check: positive with negative
    >>> add_integer(3, -1)
    2

check: float with int:
    >>> add_integer(2.1, 4)
    6

Check: int with float:
    >>> add_integer(4, 3.6)
    7

Check: both float:
    >>> add_integer(4.2, 9.1)
    13

Check: passed Boolean as b:
    >>> add_integer(2, True)
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Check: passed None as b:
    >>> add_integer(2, None)
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Check: passing float overflow:
    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

Check: first arg invalid:
    >>> add_integer("foo", 0)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Check: second arg invalid:
    >>> add_integer(0, "foo")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Check: both args invalid:
    >>> add_integer(None, None)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Check: second arg invalid:
    >>> add_integer(123123, [])
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Check: passing NaN:
    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer

Check: passing None:
    >>> add_integer(None)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Check: passing No argument:
    >>> add_integer()
    Traceback (most recent call last):
    ...
    TypeError: add_integer() missing 1 required positional argument: 'a'
